<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-09T12:56:09.576Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>codeZZZzzz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深浅拷贝</title>
    <link href="http://example.com/2022/05/09/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2022/05/09/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2022-05-09T12:54:21.362Z</published>
    <updated>2022-05-09T12:56:09.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1.浅拷贝"></a>1.浅拷贝</h1><pre><code>    function copy(obj) &#123;        let newObj = &#123;&#125;        for (let key in obj) &#123;            newObj[key] = obj[key]        &#125;        return newObj    &#125;</code></pre><h1 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h1><h2 id="2-1-递归拷贝"><a href="#2-1-递归拷贝" class="headerlink" title="2.1 递归拷贝"></a>2.1 递归拷贝</h2><pre><code>    function copy(obj) &#123;        let newObj = &#123;&#125;        for (let key in obj) &#123;            if (obj[key] instanceof Object) &#123;                newObj[key] = copy(obj[key])            &#125; else &#123; newObj[key] = obj[key] &#125;        &#125;        return newObj    &#125;</code></pre><h2 id="2-2-JSON拷贝"><a href="#2-2-JSON拷贝" class="headerlink" title="2.2 JSON拷贝"></a>2.2 JSON拷贝</h2><pre><code>    function copy1(obj) &#123;        let str = JSON.stringify(obj)        let newObj = JSON.parse(str)        return newObj    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-浅拷贝&quot;&gt;&lt;a href=&quot;#1-浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;1.浅拷贝&quot;&gt;&lt;/a&gt;1.浅拷贝&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    function copy(obj) &amp;#123;
        let newObj =</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组去重的常用方法</title>
    <link href="http://example.com/2022/05/08/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/05/08/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2022-05-08T13:03:53.920Z</published>
    <updated>2022-05-09T12:54:40.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-双层循环-使用splice去重"><a href="#1-双层循环-使用splice去重" class="headerlink" title="1.双层循环 使用splice去重"></a>1.双层循环 使用splice去重</h1><pre><code>    let arr = [1, 1, 1, 5, 7, &#123;&#125;, null, &#123;&#125;, 8, 10]    function unique1(arr) &#123;        for (let i = 0; i &lt; arr.length; i++) &#123;            for (let j = i + 1; j &lt; arr.length; j++) &#123;                if (arr[i] == arr[j]) &#123;                    arr.splice(j, 1)                &#125;            &#125;        &#125;        return arr    &#125;</code></pre><p>console.log(unique1(arr))</p><h1 id="2-ES6-Set对象"><a href="#2-ES6-Set对象" class="headerlink" title="2.ES6 Set对象"></a>2.ES6 Set对象</h1><pre><code>    let arr = [1, 1, 1, 5, 7, &#123;&#125;, null, &#123;&#125;, 8, 10]    function unique2(arr) &#123;        return Array.from(new Set(arr))    &#125;</code></pre><p>console.log(unique2(arr))</p><h1 id="3-利用sort方法去重"><a href="#3-利用sort方法去重" class="headerlink" title="3.利用sort方法去重"></a>3.利用sort方法去重</h1><pre><code>    let arr = [1, 1, 1, 5, 7, &#123;&#125;, null, &#123;&#125;, 8, 10]    function unique3(arr) &#123;        if (!Array.isArray(arr)) &#123;            console.log(&#39;type error!&#39;)            return        &#125;        let arrry = [arr[0]]        arr.sort()        for (i = 1; i &lt; arr.length; i++) &#123;            if (arr[i] !== arr[i - 1]) &#123;                arrry.push(arr[i])            &#125;        &#125;        return arrry    &#125;    console.log(unique3(arr))</code></pre><h1 id="4-使用hasownproperty-去重"><a href="#4-使用hasownproperty-去重" class="headerlink" title="4.使用hasownproperty 去重"></a>4.使用hasownproperty 去重</h1><pre><code>    let arr = [1, 1, 1, 5, 7, &#123;&#125;, null, &#123;&#125;, 8, 10]    function unique4(arr) &#123;        let obj = &#123;&#125;        let res = arr.filter(item =&gt; &#123;            if (obj.hasOwnProperty(typeof item + item)) &#123;                return false            &#125; else &#123;                obj[typeof item + item] = true                return true            &#125;        &#125;)        return res    &#125;    console.log(unique4(arr))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-双层循环-使用splice去重&quot;&gt;&lt;a href=&quot;#1-双层循环-使用splice去重&quot; class=&quot;headerlink&quot; title=&quot;1.双层循环 使用splice去重&quot;&gt;&lt;/a&gt;1.双层循环 使用splice去重&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;  </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端常见面试题</title>
    <link href="http://example.com/2022/05/08/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/05/08/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-05-08T08:17:23.087Z</published>
    <updated>2022-05-09T12:54:52.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-你对框架的认识？"><a href="#1-你对框架的认识？" class="headerlink" title="1.你对框架的认识？"></a>1.你对框架的认识？</h2><h2 id="2-你怎么理解语义化？"><a href="#2-你怎么理解语义化？" class="headerlink" title="2.你怎么理解语义化？"></a>2.你怎么理解语义化？</h2><h2 id="3-HTML5的更新"><a href="#3-HTML5的更新" class="headerlink" title="3.HTML5的更新"></a>3.HTML5的更新</h2><h2 id="4-LocalStorage和sessionStorage的区别"><a href="#4-LocalStorage和sessionStorage的区别" class="headerlink" title="4.LocalStorage和sessionStorage的区别"></a>4.LocalStorage和sessionStorage的区别</h2><h2 id="5-CSS选择器及优先级"><a href="#5-CSS选择器及优先级" class="headerlink" title="5.CSS选择器及优先级"></a>5.CSS选择器及优先级</h2><h2 id="6-CSS3的更新"><a href="#6-CSS3的更新" class="headerlink" title="6.CSS3的更新"></a>6.CSS3的更新</h2><h2 id="7-用纯CSS绘制一个三角形"><a href="#7-用纯CSS绘制一个三角形" class="headerlink" title="7.用纯CSS绘制一个三角形"></a>7.用纯CSS绘制一个三角形</h2><h2 id="8-用CSS绘制一条0-5px的线"><a href="#8-用CSS绘制一条0-5px的线" class="headerlink" title="8.用CSS绘制一条0.5px的线"></a>8.用CSS绘制一条0.5px的线</h2><h2 id="9-谷歌浏览器怎么设置小于12px的字体"><a href="#9-谷歌浏览器怎么设置小于12px的字体" class="headerlink" title="9.谷歌浏览器怎么设置小于12px的字体"></a>9.谷歌浏览器怎么设置小于12px的字体</h2><h2 id="10-三栏布局"><a href="#10-三栏布局" class="headerlink" title="10.三栏布局"></a>10.三栏布局</h2><h2 id="11-js的数据类型"><a href="#11-js的数据类型" class="headerlink" title="11.js的数据类型"></a>11.js的数据类型</h2><h2 id="12-js中simple的用处？"><a href="#12-js中simple的用处？" class="headerlink" title="12.js中simple的用处？"></a>12.js中simple的用处？</h2><h2 id="13-如果new一个箭头函数会发生什么？"><a href="#13-如果new一个箭头函数会发生什么？" class="headerlink" title="13.如果new一个箭头函数会发生什么？"></a>13.如果new一个箭头函数会发生什么？</h2><h2 id="14-new操作符具体干了什么？"><a href="#14-new操作符具体干了什么？" class="headerlink" title="14.new操作符具体干了什么？"></a>14.new操作符具体干了什么？</h2><h2 id="15-0-1-0-2-！-x3D-x3D-0-3？"><a href="#15-0-1-0-2-！-x3D-x3D-0-3？" class="headerlink" title="15.0.1+0.2 ！&#x3D;&#x3D; 0.3？"></a>15.0.1+0.2 ！&#x3D;&#x3D; 0.3？</h2><h2 id="16-事件委托？事件循环？"><a href="#16-事件委托？事件循环？" class="headerlink" title="16.事件委托？事件循环？"></a>16.事件委托？事件循环？</h2><h2 id="17-防抖与节流？"><a href="#17-防抖与节流？" class="headerlink" title="17.防抖与节流？"></a>17.防抖与节流？</h2><h2 id="18-浅拷贝和深拷贝？"><a href="#18-浅拷贝和深拷贝？" class="headerlink" title="18.浅拷贝和深拷贝？"></a>18.浅拷贝和深拷贝？</h2><h2 id="19-原声与原型链？"><a href="#19-原声与原型链？" class="headerlink" title="19.原声与原型链？"></a>19.原声与原型链？</h2><h2 id="20-作用域和作用链？"><a href="#20-作用域和作用链？" class="headerlink" title="20.作用域和作用链？"></a>20.作用域和作用链？</h2><h2 id="21-常见的数组操作方法？"><a href="#21-常见的数组操作方法？" class="headerlink" title="21.常见的数组操作方法？"></a>21.常见的数组操作方法？</h2><h2 id="22-js声明变量-var-，const，let的区别"><a href="#22-js声明变量-var-，const，let的区别" class="headerlink" title="22.js声明变量 var ，const，let的区别"></a>22.js声明变量 var ，const，let的区别</h2><h2 id="23-const声明的变量可以修改吗？const声明的对象的属性可以修改吗？"><a href="#23-const声明的变量可以修改吗？const声明的对象的属性可以修改吗？" class="headerlink" title="23.const声明的变量可以修改吗？const声明的对象的属性可以修改吗？"></a>23.const声明的变量可以修改吗？const声明的对象的属性可以修改吗？</h2><h2 id="24-vue框架的一些原理"><a href="#24-vue框架的一些原理" class="headerlink" title="24.vue框架的一些原理"></a>24.vue框架的一些原理</h2><h2 id="25-vue的双向数据绑定"><a href="#25-vue的双向数据绑定" class="headerlink" title="25.vue的双向数据绑定"></a>25.vue的双向数据绑定</h2><h2 id="26-vue实现数据劫持？"><a href="#26-vue实现数据劫持？" class="headerlink" title="26.vue实现数据劫持？"></a>26.vue实现数据劫持？</h2><h2 id="27-v-if和v-show的区别"><a href="#27-v-if和v-show的区别" class="headerlink" title="27.v-if和v-show的区别"></a>27.v-if和v-show的区别</h2><h2 id="28-vue的生命周期和钩子函数？"><a href="#28-vue的生命周期和钩子函数？" class="headerlink" title="28.vue的生命周期和钩子函数？"></a>28.vue的生命周期和钩子函数？</h2><h2 id="29-vue实现组件间传值有哪些方法？"><a href="#29-vue实现组件间传值有哪些方法？" class="headerlink" title="29.vue实现组件间传值有哪些方法？"></a>29.vue实现组件间传值有哪些方法？</h2><h2 id="30-vue中computed和watch的区别？"><a href="#30-vue中computed和watch的区别？" class="headerlink" title="30.vue中computed和watch的区别？"></a>30.vue中computed和watch的区别？</h2><h2 id="31-在vue中一般用哪个声明周期请求异步数据？"><a href="#31-在vue中一般用哪个声明周期请求异步数据？" class="headerlink" title="31.在vue中一般用哪个声明周期请求异步数据？"></a>31.在vue中一般用哪个声明周期请求异步数据？</h2><h2 id="32-http常用的状态码"><a href="#32-http常用的状态码" class="headerlink" title="32.http常用的状态码"></a>32.http常用的状态码</h2><h2 id="33-vue中-nextTick的原理及作用"><a href="#33-vue中-nextTick的原理及作用" class="headerlink" title="33.vue中$nextTick的原理及作用"></a>33.vue中$nextTick的原理及作用</h2><h2 id="34-输入url到页面加载全过程"><a href="#34-输入url到页面加载全过程" class="headerlink" title="34.输入url到页面加载全过程"></a>34.输入url到页面加载全过程</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-你对框架的认识？&quot;&gt;&lt;a href=&quot;#1-你对框架的认识？&quot; class=&quot;headerlink&quot; title=&quot;1.你对框架的认识？&quot;&gt;&lt;/a&gt;1.你对框架的认识？&lt;/h2&gt;&lt;h2 id=&quot;2-你怎么理解语义化？&quot;&gt;&lt;a href=&quot;#2-你怎么理解语义化</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深入简出Vue.js读感</title>
    <link href="http://example.com/2022/05/08/%E6%B7%B1%E5%85%A5%E7%AE%80%E5%87%BAVue-js%E8%AF%BB%E6%84%9F/"/>
    <id>http://example.com/2022/05/08/%E6%B7%B1%E5%85%A5%E7%AE%80%E5%87%BAVue-js%E8%AF%BB%E6%84%9F/</id>
    <published>2022-05-08T08:15:10.319Z</published>
    <updated>2022-05-09T12:54:45.795Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
